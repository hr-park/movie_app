{"version":3,"sources":["header/header.js","movie-list/movie-list.js","App.js","serviceWorker.js","index.js"],"names":["HeaderDiv","styled","div","header","this","props","headerMessage","Component","StyledDiv","backgroundImage","likeImage","MovieList","domConfettiRefs","movieData","map","React","createRef","showParadise","idx","confetti","current","historyPush","movieName","history","push","unit","key","image","className","onClick","genre","releaseDate","releaseData","numeral","totalAudience","format","grade","subIntro","split","values","ref","App","state","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2yZAKA,IAAMA,EAAYC,IAAOC,IAAV,KA6BAC,E,uKARP,OACE,kBAACH,EAAD,KACE,8BAAOI,KAAKC,MAAMC,oB,GAJTC,a,67CCnBrB,IAAMC,EAAYP,IAAOC,IAAV,KAGO,SAAAG,GAAK,OACvBA,EAAMI,gBAAN,+EAC4EJ,EAAMI,gBADlF,KAEI,MA+DkB,SAAAJ,GAAK,OACvBA,EAAMK,UAAN,+EAC4EL,EAAMK,UADlF,KAEI,MA8DGC,E,4MAtDXC,gBAAkB,EAAKP,MAAMQ,UAAUC,KAAI,kBAAMC,IAAMC,e,EAEvDC,aAAe,SAAAC,GACXC,mBAAS,EAAKP,gBAAgBM,GAAKE,U,EAGvCC,YAAc,SAACC,GACb,EAAKjB,MAAMkB,QAAQC,KAAnB,WAA4BF,K,uDAGpB,IAAD,OAwCL,OAAO,6BAAsBlB,KAAKC,MAAMQ,UAzBvBC,KAAI,SAACW,EAAMP,GACpB,OACI,kBAACV,EAAD,CAAWkB,IAAKR,EAAKT,gBAAiBgB,EAAKE,MAAOjB,UAAW,oBACzD,0BAAMkB,UAAU,QAAQC,QAAS,kBAAM,EAAKR,YAAYI,EAAKH,aAAaG,EAAKH,WAC/E,yBAAKM,UAAU,SAAmBH,EAAKK,MAVrChB,KAAI,SAACgB,EAAOZ,GACtB,OAAO,0BAAMQ,IAAKR,GAAMY,OAUhB,0BAAMF,UAAU,OAA4B,OAArBH,EAAKM,YAAuB,qBAA5B,UAAuCN,EAAKO,YAA5C,kBACD,OAArBP,EAAKO,aACF,0BAAMJ,UAAU,OAAhB,6CACkBK,IAAQR,EAAKS,eAAeC,OAAO,OADrD,mBACiEV,EAAKW,MADtE,SAKJ,yBAAKR,UAAU,iBAAoCH,EAAKY,SAzBzCC,MAAM,MAClBxB,KAAI,SAACyB,EAAQrB,GACxB,OAAO,0BAAMQ,IAAKR,GAAMqB,OAwBhB,yBAAKX,UAAU,eACX,0BACIY,IAAK,EAAK5B,gBAAgBM,GAC1BW,QAAS,WACL,EAAKZ,aAAaC,gB,GA3C9BH,IAAMR,WC9DfkC,E,4MAfbC,MAAQ,CACN7B,UAAW8B,IACXrC,cAAe,a,uDAIf,OACE,6BACE,kBAAC,EAAD,CAAQA,cAAeF,KAAKsC,MAAMpC,gBAClC,kBAAC,EAAD,CAAWO,UAAWT,KAAKsC,MAAM7B,iB,GAVvBN,aCMEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4aa8c42c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './header.css';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderDiv = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  padding-right: 2rem;\r\n  padding-left: 2rem;\r\n  > span {\r\n    font-size: 5rem;\r\n    font-weight: bold;\r\n    color: #7f7f7f;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\nclass header extends Component {\r\n    render() {\r\n        return(\r\n          <HeaderDiv>\r\n            <span>{this.props.headerMessage}</span>\r\n          </HeaderDiv>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default header;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport numeral from 'numeral';\r\nimport { confetti } from 'dom-confetti';\r\n\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-image: ${props =>\r\n    props.backgroundImage\r\n      ? `linear-gradient(rgba(245, 245, 245, 0), rgba(245, 245, 245, 0)), url(${props.backgroundImage})`\r\n      : ''};\r\n  background-position: 50% 50%;\r\n  background-size: cover;\r\n  padding: 2rem;\r\n  transition: 0.25s;\r\n  &:hover {\r\n    padding-top: 10rem;\r\n    padding-bottom: 10rem;\r\n    > div.sub-introduce {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n    > div.like-button {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  > span.title {\r\n    font-size: 3.5rem;\r\n    color: #61dafb;\r\n    margin-bottom: 2rem;\r\n    cursor: pointer;\r\n  }\r\n  > div.genre {\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n\r\n    > span {\r\n      margin-right: 1rem;\r\n      font-size: 1rem;\r\n      color: #f5f5f5;\r\n    }\r\n  }\r\n  > span.sub {\r\n    font-size: 2rem;\r\n    color: #f5f5f5;\r\n    margin-bottom: 1rem;\r\n    cursor: pointer;\r\n  }\r\n  > div.sub-introduce {\r\n    display: none;\r\n    padding-top: 2rem;\r\n    transition: 0.25s;\r\n\r\n    > span {\r\n      color: white;\r\n      line-height: 1.5;\r\n      font-size: 1.5rem;\r\n      font-weight: bold;\r\n      font-style: normal;\r\n      font-stretch: normal;\r\n      line-height: normal;\r\n    }\r\n  }\r\n  > div.like-button {\r\n    display: none;\r\n    padding-top: 4rem;\r\n\r\n    > span {\r\n      width: 100px;\r\n      height: 100px;\r\n      cursor: pointer;\r\n      background-image: ${props =>\r\n        props.likeImage\r\n          ? `linear-gradient(rgba(245, 245, 245, 0), rgba(245, 245, 245, 0)), url(${props.likeImage})`\r\n          : ''};\r\n      background-position: 50% 50%;\r\n      background-size: cover;\r\n    }\r\n  }\r\n`;\r\n\r\nclass MovieList extends React.Component {\r\n    domConfettiRefs = this.props.movieData.map(() => React.createRef());\r\n\r\n    showParadise = idx => {\r\n        confetti(this.domConfettiRefs[idx].current);\r\n    };\r\n\r\n    historyPush = (movieName) => {\r\n      this.props.history.push(`/${movieName}`)\r\n    }\r\n\r\n    render() {\r\n        const convertEnterToLine = someString => {\r\n            const strings = someString.split('\\n');\r\n            return strings.map((values, idx) => {\r\n                return <span key={idx}>{values}</span>;\r\n            });\r\n        };\r\n\r\n        const showGenre = genres => {\r\n            return genres.map((genre, idx) => {\r\n                return <span key={idx}>{genre}</span>;\r\n            });\r\n        };\r\n\r\n        const renderMovieList = lists => {\r\n            return lists.map((unit, idx) => {\r\n                return (\r\n                    <StyledDiv key={idx} backgroundImage={unit.image} likeImage={'/images/like.svg'}>\r\n                        <span className=\"title\" onClick={() => this.historyPush(unit.movieName)}>{unit.movieName}</span>\r\n                        <div className=\"genre\">{showGenre(unit.genre)}</div>\r\n                        <span className=\"sub\">{unit.releaseDate === null ? '미개봉' : `${unit.releaseData} 개봉`}</span>\r\n                        {unit.releaseData !== null && (\r\n                            <span className=\"sub\">\r\n                                {`누적 관객 수 : ${numeral(unit.totalAudience).format('0,0')}명 (${unit.grade}/10)`}\r\n                            </span>\r\n                        )}\r\n\r\n                        <div className=\"sub-introduce\">{convertEnterToLine(unit.subIntro)}</div>\r\n                        <div className=\"like-button\">\r\n                            <span \r\n                                ref={this.domConfettiRefs[idx]}\r\n                                onClick={() => {\r\n                                    this.showParadise(idx);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </StyledDiv>       \r\n                );\r\n            });\r\n        };\r\n        return <div>{renderMovieList(this.props.movieData)}</div>\r\n    }\r\n}\r\n\r\nexport default MovieList;","import React, { Component }  from 'react';\nimport './App.css';\nimport { data } from './data';\nimport Header from './header/header';\nimport MovieList from './movie-list/movie-list';\n\nclass App extends Component {\n  state = {\n    movieData: data,\n    headerMessage :'Movie App'\n  };\n  \n  render() {\n    return (  \n      <div>\n        <Header headerMessage={this.state.headerMessage} />\n        <MovieList movieData={this.state.movieData}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}